{"version":3,"file":"static/js/387.5f858f72.chunk.js","mappings":"yRAEaA,EAAUC,EAAAA,GAAAA,QAAH,0CAIPC,EAAWD,EAAAA,GAAAA,GAAH,wRAaRE,EAAYF,EAAAA,GAAAA,GAAH,kLAMTG,EAAgBH,EAAAA,GAAAA,IAAH,yHAObI,EAAUJ,EAAAA,GAAAA,IAAH,6K,mBC8BpB,EAnDa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAmBA,IAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAU1B,OARA,iBAAC,8GAE+BC,EAAAA,EAAAA,IAAY,CAAET,QAAAA,GAAWQ,GAFxD,OAESE,EAFT,OAGGN,GAAY,SAAAO,GAAC,wBAAQA,IAAR,OAAcD,EAAcE,KAAKC,MAAjC,IAHhB,gDAKGC,QAAQC,IAAR,MALH,wDAAD,GAQO,WACLT,EAAWU,OACZ,CACF,GAAE,CAAChB,IAECA,EAIL,OACE,SAACN,EAAD,WACE,SAACE,EAAD,UACGO,EAASc,KAAI,SAAAJ,GAAI,OAChB,SAAChB,EAAD,WACE,UAACC,EAAD,YACE,SAACC,EAAD,CACEmB,IAAG,yCAAoCL,EAAKM,cAC5CC,IAAI,GACJC,MAAM,MACNC,OAAO,SAET,0BACE,iCADF,IACgBT,EAAKU,SAErB,0BACE,sCADF,IACqBV,EAAKW,iBAZdX,EAAKY,GADL,OAqBzB,C,sNCzDM,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BlB,GAA7B,uFACkBmB,EAAAA,GAAAA,IAAA,2FAErB,CAAEnB,OAAAA,IAHC,cACCoB,EADD,yBAKEA,GALF,kEAQA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,aAAwCrB,GAAxC,gFAA6BR,EAA7B,EAA6BA,QAA7B,SACkB2B,EAAAA,GAAAA,IAAA,6CACiB3B,EADjB,4DAErB,CAAEQ,OAAAA,IAHC,cACCoB,EADD,yBAKEA,GALF,kEAQA,SAAeE,EAAtB,iDAAO,OAAP,oBAAO,aAA2CtB,GAA3C,gFAA+BuB,EAA/B,EAA+BA,SAA/B,SACkBJ,EAAAA,GAAAA,IAAA,kHACsFI,GAC3G,CAAEvB,OAAAA,IAHC,cACCoB,EADD,yBAKEA,GALF,kEAQA,SAAenB,EAAtB,iDAAO,OAAP,oBAAO,aAAwCD,GAAxC,gFAA6BR,EAA7B,EAA6BA,QAA7B,SACkB2B,EAAAA,GAAAA,IAAA,6CACiB3B,EADjB,oEAErB,CAAEQ,OAAAA,IAHC,cACCoB,EADD,yBAKEA,GALF,kEAQA,SAAeI,EAAtB,iDAAO,OAAP,oBAAO,aAA2CxB,GAA3C,gFAAgCR,EAAhC,EAAgCA,QAAhC,SACkB2B,EAAAA,GAAAA,IAAA,6CACiB3B,EADjB,oEAErB,CAAEQ,OAAAA,IAHC,cACCoB,EADD,yBAKEA,GALF,kEAQPC,EAAYI,UAAY,CACtBjC,QAASkC,IAAAA,OAAAA,WACT1B,OAAQ0B,IAAAA,OAAAA,YAEVJ,EAAcG,UAAY,CACxBF,SAAUG,IAAAA,OAAAA,WACV1B,OAAQ0B,IAAAA,OAAAA,YAEVzB,EAAYwB,UAAY,CACtBjC,QAASkC,IAAAA,OAAAA,WACT1B,OAAQ0B,IAAAA,OAAAA,YAEVF,EAAeC,UAAY,CACzBjC,QAASkC,IAAAA,OAAAA,WACT1B,OAAQ0B,IAAAA,OAAAA,W","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Services/Fetches.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 10px;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItems = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastList,\n  CastItems,\n  CardContainer,\n  Section,\n  CastImg,\n} from './Cast.styled';\nimport { getFilmCast } from 'components/Services/Fetches';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [filmCast, setFilmCast] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async function () {\n      try {\n        const fetchFilmCast = await getFilmCast({ movieId }, signal);\n        setFilmCast(p => [...p, ...fetchFilmCast.data.cast]);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  if (!movieId) {\n    return;\n  }\n\n  return (\n    <Section>\n      <CastList>\n        {filmCast.map(cast => (\n          <CastItems key={cast.id}>\n            <CardContainer>\n              <CastImg\n                src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\n                alt=\"\"\n                width=\"100\"\n                height=\"150\"\n              />\n              <p>\n                <b>Name:</b> {cast.name}\n              </p>\n              <p>\n                <b>Character:</b> {cast.character}\n              </p>\n            </CardContainer>\n          </CastItems>\n        ))}\n      </CastList>\n    </Section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nexport async function fetchTrending(signal) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=7e0fc0f40a1f522dce260b9a97593bef`,\n    { signal }\n  );\n  return response;\n}\n\nexport async function getFilmById({ movieId }, signal) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`,\n    { signal }\n  );\n  return response;\n}\n\nexport async function getFilmByName({ filmName }, signal) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US&query=${filmName}`,\n    { signal }\n  );\n  return response;\n}\n\nexport async function getFilmCast({ movieId }, signal) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`,\n    { signal }\n  );\n  return response;\n}\n\nexport async function getFilmReviews({ movieId }, signal) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`,\n    { signal }\n  );\n  return response;\n}\n\ngetFilmById.propTypes = {\n  movieId: PropTypes.number.isRequired,\n  signal: PropTypes.object.isRequired,\n};\ngetFilmByName.propTypes = {\n  filmName: PropTypes.string.isRequired,\n  signal: PropTypes.object.isRequired,\n};\ngetFilmCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n  signal: PropTypes.object.isRequired,\n};\ngetFilmReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n  signal: PropTypes.object.isRequired,\n};\n"],"names":["Section","styled","CastList","CastItems","CardContainer","CastImg","movieId","useParams","useState","filmCast","setFilmCast","useEffect","controller","AbortController","signal","getFilmCast","fetchFilmCast","p","data","cast","console","log","abort","map","src","profile_path","alt","width","height","name","character","id","fetchTrending","axios","response","getFilmById","getFilmByName","filmName","getFilmReviews","propTypes","PropTypes"],"sourceRoot":""}