{"version":3,"file":"static/js/621.f174cfb2.chunk.js","mappings":"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","sources":["components/Services/Fetches.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nasync function fetchTrending() {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=7e0fc0f40a1f522dce260b9a97593bef`\n  );\n  return response;\n}\n\nconst api = { fetchTrending };\n\nexport default api;\n\nexport async function getFilmById({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\nexport async function getFilmByName({ filmName }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US&query=${filmName}`\n  );\n  return response;\n}\n\nexport async function getFilmCast({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\nexport async function getFilmReviews({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\ngetFilmById.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\ngetFilmByName.propTypes = {\n  filmName: PropTypes.string.isRequired,\n};\ngetFilmCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\ngetFilmReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n","import styled from 'styled-components';\n\n// export const SearchBarHeader = styled.header`\n//   width: 100%;\n//   top: 0;\n//   left: 0;\n//   position: sticky;\n//   z-index: 1100;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   min-height: 64px;\n//   padding-right: 24px;\n//   padding-left: 24px;\n//   padding-top: 12px;\n//   padding-bottom: 12px;\n//   color: #fff;\n//   background-color: #3f51b5;\n//   box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n//     0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n// `;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://www.svgrepo.com/svg/19676/search');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SpanButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  border: 0;\n`;\n\nexport const SearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const SearchFormWrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import {\n  SearchForm,\n  SearchFormButton,\n  SpanButtonLabel,\n  SearchInput,\n  SearchFormWrap,\n} from './SearchBar.styled';\nimport { FcSearch } from 'react-icons/fc';\nimport PropTypes from 'prop-types';\nimport { useSearchParams } from 'react-router-dom';\n\nconst SearchBar = ({ onInputSubmit }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const handleFilmName = event => {\n    setSearchParams({ query: event.currentTarget.value.toLowerCase() });\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (query.trim() === '') {\n      return alert('Enter image for search');\n    }\n    onInputSubmit(query);\n  };\n\n  return (\n    <SearchFormWrap>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\">\n          <FcSearch />\n          <SpanButtonLabel>Search</SpanButtonLabel>\n        </SearchFormButton>\n        <SearchInput\n          type=\"text\"\n          autocomplete=\"off\"\n          autoFocus\n          placeholder=\"Search films by name\"\n          value={query}\n          onChange={handleFilmName}\n        />\n      </SearchForm>\n    </SearchFormWrap>\n  );\n};\n\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  onInputSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router';\n\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { StyledLink } from 'components/Layout/Layout.styled';\nimport { getFilmByName } from 'components/Services/Fetches';\nconst Movies = () => {\n  const [filmName, setFilmName] = useState('');\n  const [foundFilms, setFoundFilms] = useState([]);\n  const isFirstPage = useRef(true);\n  const location = useLocation();\n\n  useEffect(() => {\n    (async function () {\n      try {\n        if (isFirstPage.current) {\n          isFirstPage.current = false;\n          return;\n        }\n        if (filmName === '') {\n          return;\n        }\n        const fetchSearchingFilms = await getFilmByName({ filmName });\n        setFoundFilms(fetchSearchingFilms.data.results);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [filmName]);\n\n  const handleSubmitForm = filmName => {\n    setFilmName(filmName);\n    setFoundFilms([]);\n  };\n\n  return (\n    <section>\n      <SearchBar onInputSubmit={handleSubmitForm} />\n      {foundFilms.length > 0 && (\n        <ul>\n          {foundFilms.map(({ id, title }) => (\n            <li key={id}>\n              <StyledLink to={`${id}`} state={{ from: location }}>\n                {title}\n              </StyledLink>\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default Movies;\n"],"names":["fetchTrending","axios","response","api","getFilmById","movieId","getFilmByName","filmName","getFilmCast","getFilmReviews","propTypes","PropTypes","SearchForm","styled","SearchFormButton","SpanButtonLabel","SearchInput","SearchFormWrap","onInputSubmit","useSearchParams","searchParams","setSearchParams","query","get","onSubmit","evt","preventDefault","trim","alert","type","autocomplete","autoFocus","placeholder","value","onChange","event","currentTarget","toLowerCase","useState","setFilmName","foundFilms","setFoundFilms","isFirstPage","useRef","location","useLocation","useEffect","current","fetchSearchingFilms","data","results","console","log","length","map","id","title","to","state","from"],"sourceRoot":""}