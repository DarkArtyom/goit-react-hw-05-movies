{"version":3,"file":"static/js/387.96f52977.chunk.js","mappings":"yRAEaA,EAAUC,EAAAA,GAAAA,QAAH,0CAIPC,EAAWD,EAAAA,GAAAA,GAAH,wRAaRE,EAAYF,EAAAA,GAAAA,GAAH,kLAMTG,EAAgBH,EAAAA,GAAAA,IAAH,yHAObI,EAAUJ,EAAAA,GAAAA,IAAH,6K,mBC6BpB,EAlDa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAgBC,EAAAA,EAAAA,SAAO,GAiB7B,IAfAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,iGAEOF,EAAcG,QAFrB,uBAGKH,EAAcG,SAAU,EAH7B,2CAM+BC,EAAAA,EAAAA,IAAY,CAAET,QAAAA,IAN7C,OAMSU,EANT,OAOGN,GAAY,SAAAO,GAAC,wBAAQA,IAAR,OAAcD,EAAcE,KAAKC,MAAjC,IAPhB,kDASGC,QAAQC,IAAR,MATH,yDAAD,EAYD,GAAE,CAACf,IAECA,EAIL,OACE,SAACN,EAAD,WACE,SAACE,EAAD,UACGO,EAASa,KAAI,SAAAH,GAAI,OAChB,SAAChB,EAAD,WACE,UAACC,EAAD,YACE,SAACC,EAAD,CACEkB,IAAG,yCAAoCJ,EAAKK,cAC5CC,IAAI,GACJC,MAAM,MACNC,OAAO,SAET,0BACE,iCADF,IACgBR,EAAKS,SAErB,0BACE,sCADF,IACqBT,EAAKU,iBAZdV,EAAKW,GADL,OAqBzB,C,sNCxDM,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,GAAAA,IAAA,4FADlB,cACCC,EADD,yBAIEA,GAJF,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,8FAA6B5B,EAA7B,EAA6BA,QAA7B,SACkB0B,EAAAA,GAAAA,IAAA,6CACiB1B,EADjB,6DADlB,cACC2B,EADD,yBAIEA,GAJF,kEAOA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,8FAA+BC,EAA/B,EAA+BA,SAA/B,SACkBJ,EAAAA,GAAAA,IAAA,kHACsFI,IAFxG,cACCH,EADD,yBAIEA,GAJF,kEAOA,SAAelB,EAAtB,+CAAO,OAAP,oBAAO,8FAA6BT,EAA7B,EAA6BA,QAA7B,SACkB0B,EAAAA,GAAAA,IAAA,6CACiB1B,EADjB,qEADlB,cACC2B,EADD,yBAIEA,GAJF,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,8FAAgC/B,EAAhC,EAAgCA,QAAhC,SACkB0B,EAAAA,GAAAA,IAAA,6CACiB1B,EADjB,qEADlB,cACC2B,EADD,yBAIEA,GAJF,kEAOPC,EAAYI,UAAY,CACtBhC,QAASiC,IAAAA,OAAAA,YAEXJ,EAAcG,UAAY,CACxBF,SAAUG,IAAAA,OAAAA,YAEZxB,EAAYuB,UAAY,CACtBhC,QAASiC,IAAAA,OAAAA,YAEXF,EAAeC,UAAY,CACzBhC,QAASiC,IAAAA,OAAAA,W","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Services/Fetches.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 10px;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItems = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const CardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastList,\n  CastItems,\n  CardContainer,\n  Section,\n  CastImg,\n} from './Cast.styled';\nimport { getFilmCast } from 'components/Services/Fetches';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [filmCast, setFilmCast] = useState([]);\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    (async function () {\n      try {\n        if (isFirstRender.current) {\n          isFirstRender.current = false;\n          return;\n        }\n        const fetchFilmCast = await getFilmCast({ movieId });\n        setFilmCast(p => [...p, ...fetchFilmCast.data.cast]);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [movieId]);\n\n  if (!movieId) {\n    return;\n  }\n\n  return (\n    <Section>\n      <CastList>\n        {filmCast.map(cast => (\n          <CastItems key={cast.id}>\n            <CardContainer>\n              <CastImg\n                src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\n                alt=\"\"\n                width=\"100\"\n                height=\"150\"\n              />\n              <p>\n                <b>Name:</b> {cast.name}\n              </p>\n              <p>\n                <b>Character:</b> {cast.character}\n              </p>\n            </CardContainer>\n          </CastItems>\n        ))}\n      </CastList>\n    </Section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nexport async function fetchTrending() {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=7e0fc0f40a1f522dce260b9a97593bef`\n  );\n  return response;\n}\n\nexport async function getFilmById({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\nexport async function getFilmByName({ filmName }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US&query=${filmName}`\n  );\n  return response;\n}\n\nexport async function getFilmCast({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\nexport async function getFilmReviews({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\ngetFilmById.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\ngetFilmByName.propTypes = {\n  filmName: PropTypes.string.isRequired,\n};\ngetFilmCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\ngetFilmReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n"],"names":["Section","styled","CastList","CastItems","CardContainer","CastImg","movieId","useParams","useState","filmCast","setFilmCast","isFirstRender","useRef","useEffect","current","getFilmCast","fetchFilmCast","p","data","cast","console","log","map","src","profile_path","alt","width","height","name","character","id","fetchTrending","axios","response","getFilmById","getFilmByName","filmName","getFilmReviews","propTypes","PropTypes"],"sourceRoot":""}