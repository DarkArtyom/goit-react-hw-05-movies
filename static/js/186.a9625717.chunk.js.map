{"version":3,"file":"static/js/186.a9625717.chunk.js","mappings":"wOAkDA,UA9CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAgBC,EAAAA,EAAAA,SAAO,GAiB7B,IAfAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,iGAEOF,EAAcG,QAFrB,uBAGKH,EAAcG,SAAU,EAH7B,2CAM8BC,EAAAA,EAAAA,IAAe,CAAET,QAAAA,IAN/C,OAMSU,EANT,OAOGN,GAAc,SAAAO,GAAC,wBAAQA,IAAR,OAAcD,EAAaE,KAAKC,SAAhC,IAPlB,kDASGC,QAAQC,IAAR,MATH,yDAAD,EAYD,GAAE,CAACf,IAECA,EAIL,OACE,6BACGG,EAAWa,OAAS,GACnB,wBACGb,EAAWc,KAAI,SAAAC,GAAM,OACpB,2BACE,0BACE,mCADF,IACkBA,EAAOC,WAEzB,0BACE,mCADF,IACkBD,EAAOE,aALlBF,EAAOG,GADI,OAYxB,qDAIP,C,sNC7CM,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,GAAAA,IAAA,4FADlB,cACCC,EADD,yBAIEA,GAJF,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,8FAA6BzB,EAA7B,EAA6BA,QAA7B,SACkBuB,EAAAA,GAAAA,IAAA,6CACiBvB,EADjB,6DADlB,cACCwB,EADD,yBAIEA,GAJF,kEAOA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,8FAA+BC,EAA/B,EAA+BA,SAA/B,SACkBJ,EAAAA,GAAAA,IAAA,kHACsFI,IAFxG,cACCH,EADD,yBAIEA,GAJF,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,8FAA6B5B,EAA7B,EAA6BA,QAA7B,SACkBuB,EAAAA,GAAAA,IAAA,6CACiBvB,EADjB,qEADlB,cACCwB,EADD,yBAIEA,GAJF,kEAOA,SAAef,EAAtB,+CAAO,OAAP,oBAAO,8FAAgCT,EAAhC,EAAgCA,QAAhC,SACkBuB,EAAAA,GAAAA,IAAA,6CACiBvB,EADjB,qEADlB,cACCwB,EADD,yBAIEA,GAJF,kEAOPC,EAAYI,UAAY,CACtB7B,QAAS8B,IAAAA,OAAAA,YAEXJ,EAAcG,UAAY,CACxBF,SAAUG,IAAAA,OAAAA,YAEZF,EAAYC,UAAY,CACtB7B,QAAS8B,IAAAA,OAAAA,YAEXrB,EAAeoB,UAAY,CACzB7B,QAAS8B,IAAAA,OAAAA,W","sources":["components/Reviews/Reviews.jsx","components/Services/Fetches.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { getFilmReviews } from 'components/Services/Fetches';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [filmReview, setfilmReview] = useState([]);\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    (async function () {\n      try {\n        if (isFirstRender.current) {\n          isFirstRender.current = false;\n          return;\n        }\n        const fetchReviews = await getFilmReviews({ movieId });\n        setfilmReview(p => [...p, ...fetchReviews.data.results]);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [movieId]);\n\n  if (!movieId) {\n    return;\n  }\n\n  return (\n    <section>\n      {filmReview.length > 0 ? (\n        <ul>\n          {filmReview.map(review => (\n            <li key={review.id}>\n              <p>\n                <b>Author:</b> {review.author}\n              </p>\n              <p>\n                <b>Review:</b> {review.content}\n              </p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>There are no reviews yet</p>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nexport async function fetchTrending() {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=7e0fc0f40a1f522dce260b9a97593bef`\n  );\n  return response;\n}\n\nexport async function getFilmById({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\nexport async function getFilmByName({ filmName }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US&query=${filmName}`\n  );\n  return response;\n}\n\nexport async function getFilmCast({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\nexport async function getFilmReviews({ movieId }) {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=7e0fc0f40a1f522dce260b9a97593bef&language=en-US`\n  );\n  return response;\n}\n\ngetFilmById.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\ngetFilmByName.propTypes = {\n  filmName: PropTypes.string.isRequired,\n};\ngetFilmCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\ngetFilmReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n"],"names":["movieId","useParams","useState","filmReview","setfilmReview","isFirstRender","useRef","useEffect","current","getFilmReviews","fetchReviews","p","data","results","console","log","length","map","review","author","content","id","fetchTrending","axios","response","getFilmById","getFilmByName","filmName","getFilmCast","propTypes","PropTypes"],"sourceRoot":""}